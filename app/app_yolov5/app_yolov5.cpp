//
// Created by jiapeiyuan on 12/19/19.
//

#include "app_yolov5.hpp"

DEFINE_string(pt, "models/yolov5_pytorch/yolov5m_traced.pt", "The prototxt file used to find net configuration");
DEFINE_string(config_file, "app/app_yolov5/build_config.json", "The JSON config file for parsing model");
DEFINE_string(cali_config, "app/app_yolov5/cali_config.json", "The JSON config file for parsing model");
DEFINE_string(output_model, "models/yolov5_pytorch/yolov5m.mm", "The output model generated by magicmind");
DEFINE_string(video_path, "data/videos/cars.mp4", "The input video file path");
DEFINE_string(cali_filelist, "data/images/quant_yolo/file_list", "The calibration file list");
DEFINE_string(coco_label, "data/images/quant_yolo/coco.names", "The coco names file");
DEFINE_int32(threads, 1, "data_parallel*threads*model_parallel should <= 32");

int test_decode_cncv_yolov5(int argc, char* argv[]){
    ::google::InitGoogleLogging(argv[0]);
    FLAGS_alsologtostderr = 1;
    namespace gflags = google;
    gflags::ParseCommandLineFlags(&argc, &argv, true);

    vector<cnPipe *> pipes;

    int num = FLAGS_threads;
    int src_w = 1280;
    int src_h = 720;

    for(int i=0; i<num; i++){
        auto src = new CncodecVideoProvider(i, FLAGS_video_path, 0, true, true, false, src_w, src_h, 25);
        auto idgen = new IdGenerator();
        auto rc = new CncvPreprocess({416,416}, true, false, true, {0,0,0}, {255,255,255});
        auto *infer = new Inferencer(mPytorch, 
                                        FLAGS_cali_filelist, 
                                        FLAGS_cali_config,
                                        FLAGS_config_file, 
                                        FLAGS_pt, 
                                        "1,3,416,416", 
                                        "yolov5", 
                                        FLAGS_output_model,
                                        false,
                                        0, 0);
        auto copyout = new InferMemCopyoutOperator(i);
        auto post = new Yolov5PostProcesser(FLAGS_coco_label, 416);
        auto saver = new CvImageSaver("outputs/yolov5");
        auto video_player = new HttpVideoPlayer(8088, 1000);

        cnPipe *pipe = new cnPipe(i, true, true);
        pipe->add(src);
        pipe->add(idgen);
        pipe->add(rc);
        pipe->add(infer);
        pipe->add(copyout);
        pipe->add(post);
        pipe->add(video_player);
        pipes.push_back(pipe);
    }

    for(int i=0; i<num; i++){
        pipes[i]->init();
    }

    Timer t;
    for(int i=0; i<num; i++){
        pipes[i]->start();
    }

    for(int i=0; i<num; i++){
        pipes[i]->sync();
    }
    t.duration("test_decode_cncv_yolov3 exec:");

    return 0;
}

/* ============================================================ */
int main(int argc, char* argv[])
{
    test_decode_cncv_yolov5(argc, argv);
}

